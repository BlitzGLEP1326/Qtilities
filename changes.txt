v0.3
======
New Features:
- New ActivityPolicyFilter::ParentTrackingPolicy policy which resulted in the following additional changes:
    - TreeNode::enableActivityControl() updated to include this new policy.
    - This policy is now part of binary and XML tree exports.
    - Default policies for ActivityPolicyFilter changed. See the documentation for the new defaults.
- New ObserverHints::ModificationStateDisplayHint hint which allows the modification state of items to be displayed in observer widgets. This hint is now part of binary and XML tree exports.
- QShortcut's can now be registered in and managed by the Action Manager.
- Extension system now has the ability to create and load plugin loading configuration sets:
    - Plugin classification added (active, inactive, filtered and core plugins)
    - Plugin loading and initialization changed to handle plugins depending on their classification.
    - XML plugin configuration file support.
    - GUI control over active configuration sets and indication of core plugins.
    - The debug plugin now provides information about loaded plugin configuration sets.
    - See the updated Extension System Overview documentation for more information.
- New ObserverRelationalTable::refresh() method which can be used to refresh the table data after an observer changed.
- Much improved Debug Plugin:
    - New application state tab that gives runtime information about:
        - Application modes
        - Contexts
        - Factories
        - Plugins
- TreeNode got new functions to easily set up a SubjectTypeFilter on itself. This allows observer widgets to use meaningfull text in the name column's header.

Improvements & Notable Changes:
- As always, documentation updates:
    - Gettings Started article improved and updated, especially the Linux information.
    - The Basics article now uses a more usefull example.
- Improved QtilitiesMainWindow and management of application modes considerably:
    - QtilitiesMainWindow can now be used even if your application does not use application modes.
    - Application modes can now be listed in four positions in QtilitiesMainWindow: left, top, right and bottom.
    - The list of application modes are now styled nicely and the layout bugs present in previous version have been resolved.
    - Shortcuts are now assigned to application modes.
    - The order in which application modes must appear can now be specified.
    - It is now possible to disable/enabled modes easily.
    - Active mode selection was improved.
    - IMode interface is now easier to implement. Mode IDs can now be auto generated by the mode manager and modes without contexts associated with them can now be created. The documentation of the IMode interface was improved to properly explain these changes and the interface's functions were renamed to more meaningfull equivalents.
- ConfigurationPage has new setApplyAllPages() function which allows the 'Apply' button to apply changes on all pages, not just the current one.
- TreeFileItem XML import & export methods are now virtual.
- ActivitySubjectFilter got a new setActiveSubject() function set a single item active in an observer context.
- Observer::setDisplayHints() is now obsolete. It is replaced by Observer::inheritDisplayHints().
- OBSERVER_UNCATEGORIZED_CATEGORY is now removed. Thus you can add categorized and uncategorized subjects to the same observer.
- Changed behavior where ActivityPolicyFilter's policy set functions would not have worked if the filter already had an observer context associated with it.
- Changed behavior where SubjectTypeFilter's set functions would not have worked if the filter already had an observer context associated with it.
- When CONTEXT_MANAGER->registerContext() is called with a context which already exists, the ID of the context is returned, not -1 as in previous versions.
- SideViewerWidgetHelper is now called SideViewerWidgetFactory
- Some places in Qtilities uses folders under the application directory, for example: "/session" to save data like logging configurations, shortcut mappings etc. Previously these save operations failed if there was no session directory under the application folder. In this version the "/session" directory is automatically created when needed.
- All subject filters which forms part of %Qtilities are not exportable by default.

Documented Classes:
At this stage proper documentation is still lacking on a class level for many classes. There is an effort to document these classes and below is a list of classes that were properly documented for this release:
- Qtilities::CoreGui::SearchBoxWidget
- Qtilities::Core::ObserverRelationalTable
- Qtilities::Core::RelationalTableEntry

Bug Fixes:
- Fixed memory leak in ActivityPolicyFilter destructor.
- Fixed bug in AbstractObserverTreeModel where the local selection parent's display hints was used even if AbstractObserverItemModel::usesObserverHints() was false.
- Fixed example in "The Basics" documentation page.
- Fixed bug where AbstractTreeItem::setCategory() would not have changed the items modification state correctly.
- Got rid of all the "warning: type qualifiers ignored on function return type" & unused parameter warnings when building with gcc.
- Fixed bug where TreeNode::setCategorizedDisplayEnabled(false) would not have worked.
- Fixed bug in CodeEditorWidgetConfig constructor where window flags was not passed to base QWidget class correctly.
- Ubuntu: Fixed icon display & resource loading problems.
- Fixed ModeListWidget layout bug in QtilitiesMainWindow.
- ModeListWidget does not allow users to move mode icons anymore.
- Fixed bugs in Observer::treeCount(), Observer::treeChildren() and Observer::isParentInHierarchy() when using the containment tree building approach.
- Fixed bug where ObserverRelationalTable did not remove OBSERVER_VISITOR_ID properties in its destructor.
- Fixed bug in ObserverWidget::contextDeleted() where the function attempted to set the observer context to an invalid context in some scenarios.
- Fixed bug where Observer::exportXML() did not take the exportability property of subject filters into account. This resulted in subject filters always being exported.
- Fixed bug where Observer::deleteAll() did not change the modification state of the observer.
- Fixed numerous bugs in TreeFileItem.
- Fixed bug in Observer where the QtilitiesPropertyChangeEvent for subject filter's monitoredProperties() were not delivered correctly.

Outstanding roadmap items for this version:
- Property editor must refresh when properties changes...
- ObserverWidget: allow custom control of column spanning.
- ObserverWidget: allow easy setting of a different header for the "Items" column in tree view mode.
- Widget logger engines: rich text, and does not save formatting engines.
- Help stuff is part of docs...
- Problem where mode switching causes setNewContext() to be called twice. Check session log plugin mode for example.
- Command editor widget, remove dependency on property browser lib.
- Action manager should act as a pointer list when commands are deleted. Thus they should be removed.
- Linux problems:
    - Sort out Linux dll versioning
    - Update getting started doc to show how to install git on windows, and to add /bin to path in linux
    - Column resizing in observer widget
- ObserverDotGraph finish & blog post
- Finish new SearchBoxWidget
- Unit testing + some tests off course
- Observers:
    - Before doing this: implement observer unit testing since it is all working now. Then it will be easier to verify
      changes made.
    - Split ObserverData so that we have shared data and unique data. Then we can use a QExplicitlySharedDataPointer
      to share stuff (for example: hints) between observers. To do this, all stuff that should not be shared between observers
      should go into the observer class itself, not in the ObserverData class. We should rename ObserverData to something
      like SharedObserverData to make this clear. Using this approach we must make sure that we handle the ObserverHints
      class in the correct way in SharedObserverData.
    - Observers should get a function to handle detachment from each other and/or get proper functions to handle hints sharing.
      Thus, it should be easy to achieve fall through observer properties. This should be default for TreeNodes.
- Category activity control... Don't think this is feasable. Users should use TreeNodes for fall through activity.
- Conan integration?
- Probleem met QtilitiesCore. Om te sien verander TreeNode.h om QtilitiesCore te include.
- AbstractSubjectFilters, do not make all evaluation functions abstract...
- Getting started article should show more: QtilitiesMainWindow.
- Must update images in ObjectManagement and MainWindow examples.

v0.2
====
- Big updates to the following documentation pages:
  - Logging
  - Extension System
  - Tree Building
  - Factories
  - Observer Widgets
  - As always many many small doc updates everywhere in the API.
- Categories:
  - Qtilities uses the concept of categories in many places. For example you can add objects to an observer in different categories, or when you register a factory interface in a factory you can assign a category to it. Previously categories were defined as QStringList in some places and QString in other places. To make things consistent a new class called QtilitiesCategory was created and all the places where categories are used now uses this class.
  - ActionProvider was optimized and uses the new QtilitiesCategory class for its categories.
  - FactoryInterfaceData struct now called FactoryInterfaceTag which also uses the new QtilitiesCategory class to categorize factory interfaces.
- Tree Building:
  - New classes was added to make tree building very very easy. The classes are TreeNode, TreeItem, TreeFileItem and couple of classes doing work in the background: AbstractTreeItem and TreeItemBase. The building trees documentation was rewritten and shows how the new classes can be used.
  - XML exporting and importing was implemented for tree structures. You can now save a tree to a XML file and load it again from the file at a later stage.
- Binary Exporting:
  - ObserverHints now provides function to change its exportability. That is, the hints are not part of observer exports by default anymore.
  - Since binary exporting exports all observer properties on an object, the formatting properties of tree items (defined in the new AbstractTreeItem class) are now part of binary exports as well.
- Object Manager & Factories:
  - The object manager now contains a QObject based factory, called the Qtilities factory. This factory can be used to produce Qtilities classes such as tree nodes, tree items, observers, subject filters etc. It can also be used to register and produce custom QObject based user classes.
  - Factory classes was updated and better documented. Important changes: 
    - IFactoryData is now called InstanceFactoryInfo
    - IFactory is now called IFactoryProvider.
    - FactoryData is now called FactoryItemID
  - The object manager got extra functions to make working with factories easier.
  - The global object pool is now accessible. All Qtilities classes now registers objects in proper categories thus you can debug your global object pool by looking at it using an observer widget.
- Observer Widgets and Models. 
  - The big change is that, when in TreeView mode, the tree does not lose its selection when the observer tree is modified or when the user modified the tree using the ObserverWidget actions (Delete Item, Switch View etc.). 
  - Drag & Drop in both TreeView and TableView modes are now supported. It is controlled by the ObserverHints::DragDropHint set on the different observers in the tree. ObserverHints got a new hint called DragDropHint which can be used to control drag drop operations on observer trees.
  - Access functions for the table and tree views are now provided.
  - Actions are added to the SearchBoxWidget to allow control over which items in a tree must be filtered by the search string (See the next point).
  - Icons used are much better and nicer, fixed many bugs with custom action handlers, and the enabled state of actions.
  - Many problems fixed related to deletion of the current context and setting a new context after that.
  - Category access modes are now shown in the access column, and locked access categories are not built in tree views.
  - New class AbstractObserverTreeProxyFilter was added and is integrated into ObserverWidget. This allows searching of trees to be more effective. You can now choose what the filter must be applied to: Nodes, Items, Categories.
- The ConfigurationWidget was improved a lot: 
  - You can now show the config pages as a tree or a list.
  - The pages can now be searched.
  - All config pages which are part of Qtilities now provide proper icons.
  - The icon of the page is now shown along with the name of the active page above the config page widget.
  - QtilitiesApplication now stores a reference to the configuration page. This allows it to be accessed from anywhere in the application. 
  - A new setActivePage() method was added. Thus it is now possible to show a specific page directly. A Logging Settings action as added to the WidgetLoggerEngineFrontend widget which uses this approach to open the log settings.
- The SearchBoxWidget was improved. It is now easy to add more search options to the search options popup menu.
- Project management got some major improvements:
  - There was multiple problems when using more than one project part in an application. These are fixed.
  - The project manager now support saving of XML project files in addition to the binary projects and it is possible to specify which project types (XML and/or binary) should be available to the user, and which project type should be used a the default in an application.
  - A few convenience functions have been added to the ProjectManager to make working with different project types easier. See the class documentation for details.
  - The project manager now has a configuration option to use a custom projects path.
  - It is now possible to control the verbosity of logging and testing done during saving and loading of projects. 
- Extension System:
  - Plugins can now be loaded from custom paths.
  - The plugin configuration dialog got a major overhaul and looks and works much better especially in applications which has many plugins.
  - IPlugin improved: It does not inherit QObject anymore making it very lightweigth and any QObject based class can now implement it. It also contains new functions such as the pluginName(), pluginCategory() and pluginFileName().
  - Plugins which are independent of the application they are used can now be created. All Qtilities plugins are now created in this way.
  - Plugins:
    - A new Debug plugin which allows debugging of Qtilities is now included. This plugin allows debugging by providing an overview of the state of the global object pool at any moment, as well as the available factories registered with the object manager.The plugin will get more useful features like a list of registered contexts in the future.
- Logging:
  - The logger now supports priority messages and the QtilitiesMainWindow can be enabled/disabled to show priority messages in its status bar.
- Observers & Subject Filters:
  - attachSubject(s) and canAttach() functions got a new rejection/error message string parameter which is set with a rejection message when the attachment fails. canAttach() also got a parameter to indicate if the attachment must be silent or not (no dialogs shown).
  - NamingPolicyFilter can now be subclassed properly to create custom naming filters.
  - Many other improvements and updates to observers and subject filters.
- Building and Using Qtilities:
  - Qtilities was built using MS Visual Studio 2008 on Windows 7. This required many many small changes to the codebase which otherwise built on Ubuntu (g++) and Windows (mingw). Some testing was done using this build but everything was not tested. Some problems related to template classes (factories etc.) were experienced after the build was done and the headers were included in a different project. These were not fixed for this release. If you stumble upon it and know a fix, please contribute it.
  - New QTILITIES_NO_PROPERTY_BROWSER variable in Qtilities.pri which can be set to build Qtilities without the Qt Property Browser Solution as a dependency.
  - Namespaces in Qtilities are now easier to use. Previously it was necessary to call "use namespace" on the module used and its dependencies. Now you can just call it once on the module you are using.
- Many bug fixes and enhancements apart from the once which were fixed on the issue tracker.
